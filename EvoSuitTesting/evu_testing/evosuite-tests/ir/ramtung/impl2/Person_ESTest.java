/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 14 19:25:28 GMT 2024
 */

package ir.ramtung.impl2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl2.Book;
import ir.ramtung.impl2.Document;
import ir.ramtung.impl2.Magazine;
import ir.ramtung.impl2.Prof;
import ir.ramtung.impl2.Reference;
import ir.ramtung.impl2.Student;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Person_ESTest extends Person_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Student student0 = new Student("{X(E&MNdjqk", "So[1");
      student0.penalty = 1854;
      int int0 = student0.getPenalty();
      assertEquals(1854, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Student student0 = new Student("f@+i", "59&2je1c&I2Q&(|{");
      student0.penalty = 3008;
      student0.penalty = (-636);
      int int0 = student0.getPenalty();
      assertEquals((-636), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Prof prof0 = new Prof((String) null);
      prof0.getName();
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Student student0 = new Student((String) null, "");
      student0.getName();
      assertEquals(0, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Student student0 = new Student("]", "]");
      student0.canBorrow();
      assertEquals(0, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Prof prof0 = new Prof("+[^-]]C~b^R#5V");
      Reference reference0 = new Reference("", 3);
      Book book0 = new Book("+[^-]]C~b^R#5V", 0);
      List<Document> list0 = List.of((Document) reference0, (Document) reference0, (Document) reference0, (Document) book0, (Document) book0, (Document) book0);
      prof0.docsBorrow = list0;
      prof0.canBorrow();
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Prof prof0 = new Prof("$TAfq?G#'l;.n]");
      Integer integer0 = new Integer(69);
      List<Integer> list0 = List.of(integer0);
      prof0.dayBorrow = list0;
      // Undeclared exception!
      try { 
        prof0.timePass();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Student student0 = new Student("cant extend", "cant extend");
      student0.dayBorrow = null;
      // Undeclared exception!
      try { 
        student0.timePass();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Prof prof0 = new Prof("ir.ramtung.impl2.Book");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1909105114));
      linkedList0.add(integer0);
      prof0.dayBorrow = (List<Integer>) linkedList0;
      // Undeclared exception!
      try { 
        prof0.timePass();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Student student0 = new Student("k", "k");
      Magazine magazine0 = new Magazine("k", (-1956871269), (-1956871269), (-1956871269));
      List<Document> list0 = List.of((Document) magazine0);
      student0.docsBorrow = list0;
      // Undeclared exception!
      try { 
        student0.returnDoc("k");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Prof prof0 = new Prof("Iq? cRt$cNm^|'N");
      prof0.docsBorrow = null;
      // Undeclared exception!
      try { 
        prof0.returnDoc("Iq? cRt$cNm^|'N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Student student0 = new Student("ir.ramtung.impl2.Doctment", "ir.ramtung.impl2.Doctment");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Reference reference0 = new Reference("ir.ramtung.impl2.Doctment", 4);
      linkedList0.add((Document) reference0);
      student0.docsBorrow = (List<Document>) linkedList0;
      // Undeclared exception!
      try { 
        student0.returnDoc("ir.ramtung.impl2.Doctment");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Student student0 = new Student("k", "e");
      Reference reference0 = new Reference("k", (-1320));
      student0.borrow(reference0);
      Boolean boolean0 = Boolean.TRUE;
      List<Boolean> list0 = List.of(boolean0, boolean0, boolean0, boolean0, boolean0, boolean0, boolean0, boolean0);
      student0.canExtend = list0;
      // Undeclared exception!
      try { 
        student0.extend("k");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Prof prof0 = new Prof("Iq? cRt$cNm^|'N");
      prof0.docsBorrow = null;
      // Undeclared exception!
      try { 
        prof0.extend("Iq? cRt$cNm^|'N");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Prof prof0 = new Prof("7Pd");
      Reference reference0 = new Reference("7Pd", 412);
      List<Document> list0 = List.of((Document) reference0);
      prof0.docsBorrow = list0;
      // Undeclared exception!
      try { 
        prof0.extend("7Pd");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Student student0 = new Student("]", "]");
      Magazine magazine0 = new Magazine("]", 1748, 1748, 1748);
      student0.borrow(magazine0);
      List<Integer> list0 = List.of();
      student0.dayBorrow = list0;
      // Undeclared exception!
      try { 
        student0.extend("]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Student student0 = new Student("", "");
      student0.docsBorrow = null;
      // Undeclared exception!
      try { 
        student0.canBorrow();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Student", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Student student0 = new Student("k", "k");
      Reference reference0 = new Reference("k", (-888));
      List<Boolean> list0 = List.of();
      student0.canExtend = list0;
      // Undeclared exception!
      try { 
        student0.borrow(reference0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Prof prof0 = new Prof("x(<nsd,@`>k=^%+z");
      // Undeclared exception!
      try { 
        prof0.borrow((Document) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Student student0 = new Student("", "");
      Magazine magazine0 = new Magazine("", 10, 10, 3167);
      student0.borrow(magazine0);
      student0.timePass();
      student0.timePass();
      student0.timePass();
      assertEquals(2000, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Student student0 = new Student("", "");
      Magazine magazine0 = new Magazine("", 10, 10, 3167);
      student0.borrow(magazine0);
      student0.returnDoc("");
      assertEquals(0, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Student student0 = new Student("", "");
      Magazine magazine0 = new Magazine("", 10, 10, 3167);
      student0.borrow(magazine0);
      student0.returnDoc(")uu\"k=/\"q");
      assertEquals(0, student0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Student student0 = new Student("", "");
      Magazine magazine0 = new Magazine("", 10, 10, 3167);
      student0.borrow(magazine0);
      student0.extend("");
      try { 
        student0.extend("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cant extend
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Student student0 = new Student((String) null, "");
      Book book0 = new Book("", (-3087));
      student0.borrow(book0);
      try { 
        student0.extend("ir.ramtung.impl2.Magazine");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cant extend
         //
         verifyException("ir.ramtung.impl2.Person", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Prof prof0 = new Prof("So[1");
      prof0.getName();
      assertEquals(0, prof0.getPenalty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Student student0 = new Student("{X(E&MNdjqk", "So[1");
      int int0 = student0.getPenalty();
      assertEquals(0, int0);
  }
}
