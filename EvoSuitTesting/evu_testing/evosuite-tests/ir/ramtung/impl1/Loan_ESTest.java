/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 14 18:33:20 GMT 2024
 */

package ir.ramtung.impl1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ir.ramtung.impl1.Book;
import ir.ramtung.impl1.Document;
import ir.ramtung.impl1.Loan;
import ir.ramtung.impl1.Magazine;
import ir.ramtung.impl1.Member;
import ir.ramtung.impl1.Professor;
import ir.ramtung.impl1.Reference;
import ir.ramtung.impl1.Student;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Loan_ESTest extends Loan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Student student0 = new Student("xJCda|[.?", "AvS&LF2AAh.X(");
      Magazine magazine0 = new Magazine((String) null, 2, 2);
      Loan loan0 = new Loan(student0, magazine0, 2);
      int int0 = loan0.getPenalty(4);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Student student0 = new Student("xJCda|[.?", "AvS&LF2AAh.X(");
      Magazine magazine0 = new Magazine((String) null, 2, 2);
      Loan loan0 = new Loan(student0, magazine0, 2);
      loan0.return_(4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Professor professor0 = new Professor("Cannot extend on the same day borrowed");
      Magazine magazine0 = new Magazine("Cannot extend on the same day borrowed", 10, 4846);
      Loan loan0 = new Loan(professor0, magazine0, 4846);
      loan0.extend(806);
      loan0.extend((-4411));
      try { 
        loan0.extend(4852);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Already extended twice
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Magazine magazine0 = new Magazine("}&jSG+.9Z(L", 10, 4846);
      Student student0 = new Student("}&jSG+.9Z(L", "}&jSG+.9Z(L");
      Loan loan0 = new Loan(student0, magazine0, 2039);
      int int0 = loan0.getPenalty(4846);
      assertEquals(5610000, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Magazine magazine0 = new Magazine("}&jSG+.9Z(L", 10, 4846);
      Student student0 = new Student("}&jSG+.9Z(L", "}&jSG+.9Z(L");
      Loan loan0 = new Loan(student0, magazine0, 2039);
      int int0 = loan0.getPenalty(5610000);
      assertEquals((-1668983888), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Student student0 = new Student("0>/;cNcH%F!^", "0>/;cNcH%F!^");
      Reference reference0 = new Reference("0>/;cNcH%F!^");
      Loan loan0 = new Loan(student0, reference0, 2442);
      int int0 = loan0.getPenalty((-1045));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Student student0 = new Student("0>/;cNcH%F!^", "0>/;cNcH%F!^");
      Reference reference0 = new Reference("0>/;cNcH%F!^");
      Loan loan0 = new Loan(student0, reference0, 2442);
      loan0.return_(3000);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Student student0 = new Student("0>/;cNcH%F!^", "0>/;cNcH%F!^");
      Reference reference0 = new Reference("0>/;cNcH%F!^");
      Loan loan0 = new Loan(student0, reference0, 2442);
      loan0.return_(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Professor professor0 = new Professor("7F<i?'gtxq1*");
      Reference reference0 = new Reference("7F<i?'gtxq1*");
      Loan loan0 = new Loan(professor0, reference0, 0);
      try { 
        loan0.extend(6055);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend a late loan
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Student student0 = new Student("0>/;cNcH%F!^", "0>/;cNcH%F!^");
      Reference reference0 = new Reference("0>/;cNcH%F!^");
      Loan loan0 = new Loan(student0, reference0, 2442);
      try { 
        loan0.extend(2442);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cannot extend on the same day borrowed
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Student student0 = new Student("0>/;cNcH%F!^", "0>/;cNcH%F!^");
      Reference reference0 = new Reference("0>/;cNcH%F!^");
      Loan loan0 = new Loan(student0, reference0, 2442);
      boolean boolean0 = loan0.isBy(student0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Student student0 = new Student("0>/;cNcH%F!^", "0>/;cNcH%F!^");
      Reference reference0 = new Reference("0>/;cNcH%F!^");
      Loan loan0 = new Loan(student0, reference0, 2442);
      Student student1 = new Student("0>/;cNcH%F!^", "0>/;cNcH%F!^");
      boolean boolean0 = loan0.isBy(student1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Student student0 = new Student("0>/;cNcH%F!^", "0>/;cNcH%F!^");
      Reference reference0 = new Reference("0>/;cNcH%F!^");
      Loan loan0 = new Loan(student0, reference0, 2442);
      boolean boolean0 = loan0.isFor(reference0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Professor professor0 = new Professor("y -'bG]]xR");
      Book book0 = new Book("y -'bG]]xR");
      Loan loan0 = new Loan(professor0, book0, 1);
      Reference reference0 = new Reference("ir.ramtung.impl1.Document");
      boolean boolean0 = loan0.isFor(reference0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Professor professor0 = new Professor("_q<(,Xbt*p");
      Loan loan0 = null;
      try {
        loan0 = new Loan(professor0, (Document) null, (-3184));
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Book book0 = new Book("zuBdz[brhN");
      Loan loan0 = null;
      try {
        loan0 = new Loan((Member) null, book0, 2626);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Invalid argument to loan constructor
         //
         verifyException("ir.ramtung.impl1.Loan", e);
      }
  }
}
